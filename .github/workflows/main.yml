name: Builds, tests & co

on:
  push:
    paths:
    - 'src/**'
    - '!src/tools/**'
    - 'src_ext/**'
    - 'dune'
    - 'dune-project'
    - '*.opam'
    - 'Makefile*'
    - 'configure*'
  pull_request:
    paths:
    - 'src/**'
    - '!src/tools/**'
    - 'src_ext/**'
    - 'dune'
    - 'dune-project'
    - '*.opam'
    - 'Makefile*'
    - 'configure*'
    - '.github/scripts/**'
    - '.github/workflows/main.yml'
    - 'tests/**'
#    paths-ignore:
#    - 'release/**'
#    - 'shell/**'
#    - 'admin-scripts/**'
#    - 'doc/**'
#    - 'CHANGES'
#    - 'LICENSE'
#    - 'CONTRIBUTING.md'
#    - 'master_changes.md'
#    - 'README.md'

env:
  OPAMBSVERSION: 2.1.0
  OPAMBSROOT: ~/.cache/.opam.cached
  OPAM12CACHE: ~/.cache/opam1.2/cache
  OPAM_REPO: https://github.com/ocaml/opam-repository.git
  OPAM_TEST_REPO_SHA: 59a65e144ad843d97ddd3e3e600c2a33c02527fd
  OPAM_REPO_SHA: 59a65e144ad843d97ddd3e3e600c2a33c02527fd
  SOLVER:
  CYGWIN_MIRROR: http://mirrors.kernel.org/sourceware/cygwin/
  CYGWIN_ROOT: D:\cygwin
  CYGWIN: winsymlinks:native
  CYGWIN_EPOCH: 3

defaults:
  run:
    shell: bash

jobs:

####
# Caches
####
  Analyse:
    runs-on: ubuntu-latest
    outputs:
      archives: ${{ steps.keys.outputs.archives }}
      ocaml-secondary-compiler: ${{ steps.keys.outputs.ocaml-secondary-compiler }}
      ocaml-cache: ${{ steps.keys.outputs.ocaml-cache }}
      cygwin: ${{ steps.keys.outputs.cygwin }}
      opam-bs-cache: ${{ steps.keys.outputs.opam-bs-cache }}
    steps:
    - name: Checkout tree
      uses: actions/checkout@v2
    - name: Determine cache keys
      id: keys
      run: |
        echo archives=archives-1-${{ hashFiles('src_ext/Makefile.sources', 'src_ext/Makefile', '.github/scripts/common/preamble.sh', '.github/scripts/main/preamble.sh', '.github/scripts/main/archives-cache.sh') }}-${{ env.OPAM_REPO_SHA }}
        echo ::set-output name=archives::archives-1-${{ hashFiles('src_ext/Makefile.sources', 'src_ext/Makefile', '.github/scripts/common/preamble.sh', '.github/scripts/main/preamble.sh', '.github/scripts/main/archives-cache.sh') }}-${{ env.OPAM_REPO_SHA }}
        echo ocaml-secondary-compiler=legacy-${{ env.OPAM_REPO_SHA }}
        echo ::set-output name=ocaml-secondary-compiler::legacy-${{ env.OPAM_REPO_SHA }}
        echo ocaml-cache=${{ hashFiles('.github/scripts/main/ocaml-cache.sh', '.github/scripts/main/preamble.sh') }}
        echo ::set-output name=ocaml-cache::${{ hashFiles('.github/scripts/main/ocaml-cache.sh', '.github/scripts/main/preamble.sh') }}
        echo cygwin=${{ hashFiles('.github/scripts/cygwin.cmd') }}-${{ env.CYGWIN_EPOCH }}
        echo ::set-output name=cygwin::${{ hashFiles('.github/scripts/cygwin.cmd') }}-${{ env.CYGWIN_EPOCH }}
        echo opam-bs-cache=${{ hashFiles('.github/scripts/main/opam-bs-cache.sh', '*.opam', '.github/scripts/main/preamble.sh') }}
        echo ::set-output name=opam-bs-cache::${{ hashFiles('.github/scripts/main/opam-bs-cache.sh', '*.opam', '.github/scripts/main/preamble.sh') }}
    - name: src_ext/archives and opam-repository Cache
      id: archives
      uses: ocaml-opam/cache@opam
      with:
        path: |
          src_ext/archives
          ~/opam-repository
        key: ${{ steps.keys.outputs.archives }}
        check-only: true
        force-gzip: true
    - name: Create src_ext/archives and opam-repository cache
      if: steps.archives.outputs.cache-hit != 'true'
      run: bash -exu .github/scripts/main/archives-cache.sh
    - name: ocaml-secondary-compiler Cache
      id: legacy
      uses: ocaml-opam/cache@opam
      with:
        path: ~/.opam
        key: ${{ runner.os }}-${{ steps.keys.outputs.ocaml-secondary-compiler }}
        check-only: true
    - name: Install system's opam package
      if: steps.legacy.outputs.cache-hit != 'true'
      run: sudo apt install opam || true
    - name: Create ocaml-secondary-compiler cache
      if: steps.legacy.outputs.cache-hit != 'true'
      run: bash -exu .github/scripts/main/legacy-cache.sh

  Cygwin:
    runs-on: windows-2019
    needs: Analyse
    steps:
    - name: Cygwin32 Cache
      id: cygwin32
      uses: ocaml-opam/cache@opam
      with:
        path: D:\Cache\cygwin\i686-pc-cygwin
        key: cygwin32-${{ needs.Analyse.outputs.cygwin }}
        check-only: true
        force-gzip: true
    - name: Cygwin64 Cache
      id: cygwin64
      uses: ocaml-opam/cache@opam
      with:
        path: D:\Cache\cygwin\x86_64-pc-cygwin
        key: cygwin64-${{ needs.Analyse.outputs.cygwin }}
        check-only: true
        force-gzip: true
    - name: Checkout tree
      if: steps.cygwin32.outputs.cache-hit != 'true' || steps.cygwin64.outputs.cache-hit != 'true'
      uses: actions/checkout@v2
    - name: Create Cygwin32 cache
      if: steps.cygwin32.outputs.cache-hit != 'true'
      shell: cmd
      run: .github\scripts\cygwin.cmd i686-pc-cygwin D:\Cache\cygwin create
    - name: Create Cygwin64 cache
      if: steps.cygwin64.outputs.cache-hit != 'true'
      shell: cmd
      run: .github\scripts\cygwin.cmd x86_64-pc-cygwin D:\Cache\cygwin create


  Build-Windows:
    runs-on: windows-2019
    needs: [ Analyse, Cygwin ]
    strategy:
      matrix:
        host: [ x86_64-pc-cygwin ]
        build: [ x86_64-pc-cygwin ]
        ocamlv: [ 4.14.0 ]
        include:
          - ocamlv: 4.14.0
            host: i686-pc-cygwin
            build: i686-pc-cygwin
      fail-fast: false
    defaults:
      run:
        shell: D:\cygwin\bin\bash.exe {0}
    steps:
    - name: Configure LF checkout for Cygwin
      if: endsWith(matrix.host, '-pc-cygwin')
      shell: cmd
      run: |
        git config --system core.autocrlf false
        git config --system core.eol lf
    - name: Checkout tree
      uses: actions/checkout@v2
    - name: Cygwin32 Cache
      id: cygwin32
      if: matrix.build == 'i686-pc-cygwin'
      uses: ocaml-opam/cache@opam
      with:
        path: D:\Cache\cygwin\i686-pc-cygwin
        key: cygwin32-${{ needs.Analyse.outputs.cygwin }}
        force-gzip: true
    - name: Cygwin64 Cache
      id: cygwin64
      if: matrix.build == 'x86_64-pc-cygwin'
      uses: ocaml-opam/cache@opam
      with:
        path: D:\Cache\cygwin\x86_64-pc-cygwin
        key: cygwin64-${{ needs.Analyse.outputs.cygwin }}
        force-gzip: true
    - name: src_ext/archives and opam-repository Cache
      id: archives
      uses: ocaml-opam/cache@opam
      with:
        path: |
          src_ext/archives
          ~/opam-repository
        key: ${{ needs.Analyse.outputs.archives }}
        force-gzip: true
    - name: OCaml ${{ matrix.ocamlv }} Cache
      id: ocaml-cache
      uses: ocaml-opam/cache@opam
      with:
        path: D:\Cache\ocaml-local.tar
        key: ${{ runner.os }}-${{ matrix.host }}-ocaml-${{ matrix.ocamlv }}-${{ needs.Analyse.outputs.ocaml-cache }}
        force-gzip: true
    - name: Unpack Cygwin
      shell: cmd
      run: .github\scripts\cygwin.cmd ${{ matrix.build }} D:\Cache\cygwin ${{ matrix.host }}
    - name: Unpack OCaml ${{ matrix.ocamlv }}
      run: bash -exu .github/scripts/main/ocaml-cache.sh ${{ runner.os }} ${{ matrix.ocamlv }} ${{ matrix.host }}
    - name: Build
      run: bash -exu .github/scripts/main/main.sh ${{ matrix.host }}
    - name: Test (basic - Cygwin)
      if: endsWith(matrix.host, '-pc-cygwin')
      run: bash -exu .github/scripts/main/test.sh
    - name: Test (basic - native Windows)
      env:
        OPAMROOT: D:\a\opam\opam\.opam
      if: endsWith(matrix.host, '-pc-cygwin') == false
      shell: cmd
      run: |
        set Path=D:\Cache\ocaml-local\bin;%Path%
        if "${{ matrix.host }}" equ "x86_64-pc-windows" call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        if "${{ matrix.host }}" equ "i686-pc-windows" call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars32.bat"
        opam init --yes --bare default git+file://D:/opam-repository#${{ env.OPAM_TEST_REPO_SHA }} || exit /b 1
        opam switch --yes create default ocaml-system || exit /b 1
        opam env || exit /b 1
        opam install --yes lwt || exit /b 1
        opam list || exit /b 1
        opam config report || exit /b 1
    - name: Test (reftests)
      run: bash -exu .github/scripts/main/reftests.sh ${{ matrix.host }}
