EXT_LIB:=$(shell PATH="$(PATH)" ocamlc -config | tr -d '\r' | sed -ne "s/ext_lib: \.//p")
EXT_DLL:=$(shell PATH="$(PATH)" ocamlc -config | tr -d '\r' | sed -ne "s/ext_dll: \.//p")
EXT_EXE:=$(if $(filter Win32,$(shell PATH="$(PATH)" ocamlc -config | grep -F os_type)),.exe)
OCAMLBIN:=$(dir $(shell PATH="$(PATH)" command -v ocamlc))
# SITELIB must *not* be evaluated with := (because it must be evaluated *after*
# ocamlfind has been compiled)
ifeq ($(shell command -v cygpath 2>/dev/null),)
OCAMLROOT:=$(dir $(abspath $(OCAMLBIN)))
SITELIB=$(shell PATH="$(PATH)" ocamlfind printconf path)
LDCONF=$(shell PATH="$(PATH)" ocamlfind printconf ldconf)
else
OCAMLROOT:=$(shell PATH="$(PATH)" echo $(dir $(abspath $(OCAMLBIN))) | cygpath -f - -m)
SITELIB=$(shell PATH="$(PATH)" ocamlfind printconf path | cygpath -f - -m)
LDCONF=$(shell PATH="$(PATH)" ocamlfind printconf ldconf | cygpath -f - -m)
endif

# Package dependencies
opam-file-format.pkgbuild: findlib.pkgbuild dune-local.pkgbuild

cppo.pkgbuild: dune-local.pkgbuild

extlib.pkgbuild: dune-local.pkgbuild cppo.pkgbuild

ocamlbuild.pkgbuild: findlib.pkgbuild

re.pkgbuild: dune-local.pkgbuild seq.pkgbuild findlib.pkgbuild

seq.pkgbuild: dune-local.pkgbuild

ocamlgraph.pkgbuild: dune-local.pkgbuild stdlib-shims.pkgbuild

topkg.pkgbuild: findlib.pkgbuild ocamlbuild.pkgbuild

cmdliner.pkgbuild: dune-local.pkgbuild

cudf.pkgbuild: dune-local.pkgbuild extlib.pkgbuild

dose3.pkgbuild: dune-local.pkgbuild extlib.pkgbuild base64.pkgbuild re.pkgbuild ocamlgraph.pkgbuild cudf.pkgbuild stdlib-shims.pkgbuild

# mccs.pkgbuild depends on findlib because the files are explicitly installed using it
mccs.pkgbuild: dune-local.pkgbuild cudf.pkgbuild findlib.pkgbuild

opam-0install-cudf.pkgbuild: dune-local.pkgbuild cudf.pkgbuild 0install-solver.pkgbuild

0install-solver.pkgbuild: dune-local.pkgbuild

stdlib-shims.pkgbuild: dune-local.pkgbuild

base64.pkgbuild: dune-local.pkgbuild

dune-local.pkgbuild: findlib.pkgbuild

spdx_licenses.pkgbuild: dune-local.pkgbuild

uutf.pkgbuild: findlib.pkgbuild ocamlbuild.pkgbuild topkg.pkgbuild cmdliner.pkgbuild

jsonm.pkgbuild: findlib.pkgbuild ocamlbuild.pkgbuild topkg.pkgbuild  uutf.pkgbuild

sha.pkgbuild: dune-local.pkgbuild stdlib-shims.pkgbuild

swhid_core.pkgbuild: dune-local.pkgbuild

stublibs:
	grep -q "$(SITELIB)/stublibs" $(LDCONF) || echo $(SITELIB)/stublibs >> $(LDCONF)

opam-file-format-pkg-build:
	dune build @install -p opam-file-format
	dune install "--prefix=$(OCAMLROOT)" -p opam-file-format opam-file-format

findlib-pkg-build:
	./configure -sitelib "$(OCAMLROOT)lib"
	echo "$(OCAMLROOT)lib/stublibs" >> "$(OCAMLROOT)lib/ocaml/ld.conf"
	make all opt install

cppo-pkg-build:
	dune build @install -p cppo
	cp _build/install/default/bin/cppo$(EXT_EXE) $(OCAMLBIN)/
	mkdir -p $(SITELIB)/cppo
	cp _build/install/default/lib/cppo/META $(SITELIB)/cppo/

extlib-pkg-build:
	dune build @install -p extlib
	dune install "--prefix=$(OCAMLROOT)" -p extlib extlib

ocamlbuild-pkg-build:
	make -f configure.make all OCAMLBUILD_PREFIX=$(OCAMLROOT) OCAMLBUILD_BINDIR=$(OCAMLBIN) OCAMLBUILD_LIBDIR=$(SITELIB) OCAML_NATIVE=true OCAML_NATIVE_TOOLS=true
	make all findlib-install

re-pkg-build:
	dune build @install -p re
	dune install "--prefix=$(OCAMLROOT)" -p re re

ocamlgraph-pkg-build:
	dune installed-libraries
	dune build @install -p ocamlgraph
	dune install "--prefix=$(OCAMLROOT)" -p ocamlgraph ocamlgraph

EXTS1=$(EXT_LIB) mli
EXTS2=a i ti xa xs

topkg-pkg-build:
	ocaml pkg/pkg.ml build --pkg-name topkg --dev-pkg false
	ocamlfind install topkg _build/pkg/META $(addprefix _build/src/topkg.,$(EXTS1)) $(addprefix _build/src/topkg.cm,$(EXTS2)) _build/src/topkg*.cmx

cmdliner-pkg-build:
	dune build @install -p cmdliner
	dune install "--prefix=$(OCAMLROOT)" -p cmdliner cmdliner

cudf-pkg-build:
	dune build @install -p cudf
	dune install "--prefix=$(OCAMLROOT)" -p cudf cudf

dose3-pkg-build:
	dune build @install -p dose3
	dune install "--prefix=$(OCAMLROOT)" -p dose3 dose3

dune-local-pkg-build:
	ocaml boot/bootstrap.ml
	install _boot/dune.exe $(OCAMLBIN)/dune$(EXT_EXE)

mccs-pkg-build: stublibs
	dune build @install -p mccs
	dune install "--prefix=$(OCAMLROOT)" -p mccs mccs

opam-0install-cudf-pkg-build:
	dune build @install -p opam-0install-cudf
	dune install "--prefix=$(OCAMLROOT)" -p opam-0install-cudf opam-0install-cudf

0install-solver-pkg-build:
	dune build @install -p 0install-solver
	dune install "--prefix=$(OCAMLROOT)" -p 0install-solver 0install-solver

seq-pkg-build:
	dune build @install -p seq
	dune install "--prefix=$(OCAMLROOT)" -p seq seq

stdlib-shims-pkg-build:
	dune build @install -p stdlib-shims
	dune install "--prefix=$(OCAMLROOT)" -p stdlib-shims stdlib-shims

base64-pkg-build:
	dune build @install -p base64
	dune install "--prefix=$(OCAMLROOT)" -p base64 base64

spdx_licenses-pkg-build:
	dune build @install -p spdx_licenses
	dune install "--prefix=$(OCAMLROOT)" -p spdx_licenses spdx_licenses

uutf-pkg-build:
	ocaml pkg/pkg.ml build --pkg-name uutf --dev-pkg false --with-cmdliner true
	ocamlfind install uutf _build/pkg/META $(addprefix _build/src/uutf.,$(EXTS1)) $(addprefix _build/src/uutf.cm,$(EXTS2)) _build/src/uutf*.cmx

jsonm-pkg-build:
	ocaml pkg/pkg.ml build --pkg-name jsonm --pinned false
	ocamlfind install jsonm _build/pkg/META $(addprefix _build/src/jsonm.,$(EXTS1)) $(addprefix _build/src/jsonm.cm,$(EXTS2)) _build/src/jsonm*.cmx

sha-pkg-build: stublibs
	dune build @install -p sha
	dune install "--prefix=$(OCAMLROOT)" -p sha sha

swhid_core-pkg-build:
	dune build @install -p swhid_core
	dune install "--prefix=$(OCAMLROOT)" -p swhid_core swhid_core
